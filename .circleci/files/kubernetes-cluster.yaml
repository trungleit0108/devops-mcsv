AWSTemplateFormatVersion: "2010-09-09"
Description: Kubernetes Cluster

Parameters:
  ClusterName:
    Type: String
    Description: Name for the EKS cluster
  AvailabilityZone:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: Availability Zone for the subnet
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Key Pair Name for SSH access

Resources:
  MyVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MyVPC

  MySubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: !Ref AvailabilityZone
      Tags:
        - Key: Name
          Value: MySubnet

  EKSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: eks-service-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: image_demo

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the cluster
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: MySecurityGroup

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      LaunchConfigurationName: kubernetes-launch-config
      ImageId: ami-04823729c75214919  # Specify an appropriate Amazon Linux 2 AMI ID
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref SecurityGroup
      UserData:
        Fn::Base64: |
          #!/bin/bash
          echo "Starting user data script"
          echo "Installing Docker..."
          yum install -y docker

          echo "Starting Docker service..."
          service docker start

          echo "Building and running Docker container..."
          docker build --tag=image_demo .

          echo "Running Docker container..."
          docker run -d -p 8000:80 image_demo

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: kubernetes-asg
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: 1
      MaxSize: 3
      DesiredCapacity: 1
      VPCZoneIdentifier:
        - !Ref MySubnet

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref ClusterName
      RoleArn: !GetAtt EKSServiceRole.Arn
      Version: 1.21  # Specify the desired Kubernetes version

  EKSNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      ClusterName: !Ref ClusterName
      NodegroupName: eks-nodegroup
      Subnets:
        - !Ref MySubnet
      InstanceTypes:
        - t2.micro  # Specify the desired instance types
      ScalingConfig:
        DesiredSize: 1
        MinSize: 1
        MaxSize: 3

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Load balancer security group
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref SecurityGroup

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: my-load-balancer
      Subnets:
        - !Ref MySubnet
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Type: application

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: my-target-group
      Port: 80
      Protocol: HTTP
      VpcId: !Ref MyVPC
      TargetType: instance
      Targets:
        - Id: !Ref AutoScalingGroup
          Port: 8000

Outputs:
  ClusterNameOutput:
    Value: !Ref ClusterName
    Description: EKS cluster name
  LoadBalancerDNSName:
    Value: !GetAtt LoadBalancer.DNSName
    Description: DNS name of the load balancer
