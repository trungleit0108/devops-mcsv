Description: Kubernetes Cluster

Parameters:
  ClusterName:
    Type: String
    Description: Name for the EKS cluster
  AvailabilityZone1:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: Availability Zone for the first subnet
  AvailabilityZone2:
    Type: AWS::EC2::AvailabilityZone::Name
    Description: Availability Zone for the second subnet
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Key Pair Name for SSH access

Resources:
  MainVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: MainVPC

  InternetGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: InternetGW

  MyVPCInternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: 
      - MainVPC
      - InternetGW
    Properties:
      VpcId: !Ref MainVPC
      InternetGatewayId: !Ref InternetGW

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Ref AvailabilityZone1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MainVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Ref AvailabilityZone2
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet

  ElasticIp:
    Type: AWS::EC2::EIP

  PublicNATGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      # AllocationId: !Ref ElasticIp
      AllocationId: !GetAtt ElasticIp.AllocationId
      SubnetId: !Ref PublicSubnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MainVPC

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MainVPC

  PublicRoute:
    DependsOn:
      - InternetGW
      - PublicRouteTable
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGW

  PrivateRoute:
    DependsOn:
      - PublicNATGateway
      - PrivateRouteTable
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref PublicNATGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  EKSServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: eks-service-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy

  myEKSWorkerNodeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: my-eks-worker-node-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy

  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: image_demo

  SecurityGroupCluster:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - MainVPC
    Properties:
      GroupDescription: Security group for the cluster
      VpcId: !Ref MainVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: SecurityGroupCluster

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    DependsOn: SecurityGroupCluster
    Properties:
      LaunchConfigurationName: kubernetes-launch-config
      ImageId: ami-0261755bbcb8c4a84
      InstanceType: t2.micro
      KeyName: !Ref KeyPairName
      SecurityGroups:
        - !Ref SecurityGroupCluster
      UserData:
        Fn::Base64: |
          #!/bin/bash
          echo "Starting user data script"
          echo "Installing Docker..."
          yum install -y docker

          echo "Starting Docker service..."
          service docker start

          echo "Building and running Docker container..."
          docker build --tag=image_demo .

          echo "Running Docker container..."
          docker run -d -p 8000:80 image_demo

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
      - MyVPCInternetGatewayAttachment
      - LaunchConfiguration
      - PublicSubnet
      - PrivateSubnet
    Properties:
      AutoScalingGroupName: kubernetes-asg
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: "1"
      MaxSize: "2"
      DesiredCapacity: "1"
      VPCZoneIdentifier:
        - !Ref PublicSubnet
        - !Ref PrivateSubnet

  EKSCluster:
    Type: AWS::EKS::Cluster
    DependsOn:
      - SecurityGroupCluster
      - PublicSubnet
      - PrivateSubnet
    Properties:
      Name: !Ref ClusterName
      RoleArn: !GetAtt EKSServiceRole.Arn
      Version: "1.27" # Specify the desired Kubernetes version
      ResourcesVpcConfig:
        SecurityGroupIds:
          - !Ref SecurityGroupCluster
        SubnetIds:
          - !Ref PublicSubnet
          - !Ref PrivateSubnet

  EKSNodeGroup:
    Type: AWS::EKS::Nodegroup
    DependsOn:
      - EKSCluster
      - PublicSubnet
      - PrivateSubnet
      - EKSServiceRole
    Properties:
      ClusterName: !Ref EKSCluster
      NodegroupName: eks-nodegroup
      Subnets:
        - !Ref PublicSubnet
        - !Ref PrivateSubnet
      InstanceTypes:
        - t2.micro # Specify the desired instance types
      ScalingConfig:
        DesiredSize: 1
        MinSize: 1
        MaxSize: 2
      NodeRole: !GetAtt EKSServiceRole.Arn

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DependsOn:
      - SecurityGroupCluster
    Properties:
      GroupDescription: Load balancer security group
      VpcId: !Ref MainVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref SecurityGroupCluster

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DependsOn:
      - LoadBalancerSecurityGroup
    Properties:
      Name: my-load-balancer
      Subnets:
        - !Ref PublicSubnet
        - !Ref PrivateSubnet
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Type: application

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn:
      - AutoScalingGroup
    Properties:
      Name: my-target-group
      Port: 80
      Protocol: HTTP
      VpcId: !Ref MainVPC
      TargetType: instance
      Targets:
        - Id: !Ref AutoScalingGroup
          Port: 8000

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - LoadBalancer
      - TargetGroup
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

Outputs:
  ClusterNameOutput:
    Value: !Ref ClusterName
    Description: EKS cluster name
  LoadBalancerDNSName:
    Value: !GetAtt LoadBalancer.DNSName
    Description: DNS name of the load balancer
